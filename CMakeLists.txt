cmake_minimum_required (VERSION 3.1.0 FATAL_ERROR)
project (Paratosthenes)
#add_executable(Paratosthenes_serial serial_sieve.cpp)
#target_compile_features(Paratosthenes_serial PRIVATE cxx_range_for)

#find_package(OpenMP)
#if(OPENMP_FOUND)
#	add_executable(Paratosthenes_openmp openmp_sieve.cpp)
#	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
#	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
#	target_compile_features(Paratosthenes_openmp PRIVATE cxx_range_for)
#endif()

find_package(CUDA)
if(CUDA_FOUND)
	set(AppName "Paratosthenes_cuda")
	set(LibName "${AppName}_lib")
	set(LibName_Cuda "${AppName}_lib_cuda")
	set(CUDA_HOST_COMPILER "${CMAKE_CXX_COMPILER}")
	set(CUDA_PROPAGATE_HOST_FLAGS ON)
	list(APPEND CUDA_NVCC_FLAGS "-arch=sm_35;-std=c++11;-O2;-DVERBOSE")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	#set_target_properties(${AppName} PROPERTIES COMPILE_FLAGS "-std=c++11")


	cuda_add_library(${LibName_Cuda} cuda_search_interval.cpp cuda_search_interval.h cuda_search_interval.cu)
	#set_target_properties(${LibName} PROPERTIES COMPILE_FLAGS "-std=c++11")

	add_executable(${AppName} cuda_sieve.cpp)
	set_target_properties(${AppName} PROPERTIES COMPILE_FLAGS "-std=c++11")
	target_link_libraries(${AppName} ${LibName_Cuda})
endif()
